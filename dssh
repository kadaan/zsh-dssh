if [[ $0 != dssh || -n $ZSH_SCRIPT ]]; then
    0=${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}
    0=${${(M)0##/*}:-$PWD/$0}
    typeset ZSH_DSSH_DIR=${0:h}
fi

if [[ "${DEVBOX_SHELL_ENABLED:-0}" != "1" ]] && command -v devbox &>/dev/null; then
  devbox run -c "$ZSH_DSSH_DIR" dssh "$@"
  return $?
fi

set +m
set -o pipefail

local WAS_UPDATED=false
local DEFAULT_PARAMETERS=( "-o ConnectTimeout=10" )
local PUBLIC_DNS_NAME_PATTERN="ec2-.+"

_usage() {
  echo
  echo "Locates and connects to AWS servers via SSH."
  echo
  echo "Usage: dssh [ssh options] [options] tags [tags ...]"
  echo ""
  _dssh_tag_usage
  echo "SSH OPTIONS:"
  echo "    Flags:   -4 | -6 | -A | -a | -C | -f | -G | -g | -K | -k | -M"
  echo "             -q | -s | -T | -t | -V | -X | -x | -Y | -y"
  echo "    Options: -B | -b | -c | -D | -E | -e | -F | -I | -i | -J | -l"
  echo "             -m | -O | -o | -p | -Q | -R | -S | -W | -w"
  echo ""
  echo "OPTIONS:"
  echo "    --tmux, --tmux=session, --no_tmux  enable/disable tmux session"
  echo "    --command=COMMAND                  run the specified command and exit"
  echo "    --tunnel=PORT                      open a tunnel for the specified port"
  _dssh_common_usage
}

_parse_parameter() {
  local shift_count=1
  case "$1" in
    -4 | -6 | -A | -a | -C | -f | -G | -g | -K | -k | -M | -q | -s | -T | -t | -V | -X | -x | -Y | -y)
      _dssh_add_ssh_option "$1"
    ;;
    -B | -b | -c | -D | -E | -e | -F | -I | -i | -J | -l | -m | -O | -o | -p | -Q | -R | -S | -W | -w)
      _dssh_add_ssh_option "$1 $2"
      shift_count=2
    ;;
    -B\ * | -b\ * | -c\ * | -D\ * | -E\ * | -e\ * | -F\ * | -I\ * | -i\ * | -J\ * | -l\ * | -m\ * | -O\ * | -o\ * | -p\ * | -Q\ * | -R\ * | -S\ * | -W\ * | -w\ *)
      _dssh_add_ssh_option "$1"
    ;;
    --tmux)
      enable_tmux="default"
    ;;
    --tmux=*)
      enable_tmux="${1#*=}"
      if [[ "$enable_tmux" == "" ]]; then
        _dssh_perror "--tmux=<SESSION> cannot have an empty session"
      fi
    ;;
    --no_tmux)
      enable_tmux=""
    ;;
    --tunnel=*)
      tunnel="${1#*=}"
    ;;
    -c=* | --command=*)
      command_string="${1#*=}"
    ;;
    -v | -vv | -vvv | -vvvv)
      _dssh_add_ssh_option "-$(printf 'v%.0s' {1..$verbose_level})"
    ;;
    *)
      if [[ "$1" =~ ^-[46AaCfGgKkMNnqsTtVXxYy]+$ ]]; then
        for char in $(echo "${1:1}" | fold -w1); do
          _parse_parameter "-$char"
        done
      else
        _dssh_parse_common_parameters "$1"
        shift_count=$?
      fi
    ;;
  esac
  return $shift_count
}

_dssh_prepare_dssh_locking

if [[ $# -eq 0 ]]; then
  _dssh_perror "wrong number of input parameters [$#]"
  _usage
  return $_dssh_e_noargs
fi

local python_installed=false
local refresh_enabled=false
local ip_mode="AUTO"
local verbose_level=0
local ssh_options=()
local tags=()
local enable_tmux=""
local command_string=""
local tunnel=""
if ! _dssh_parse_parameters ".dsshrc" "$@"; then
  return $_dssh_e_noerror
fi

if [[ "$enable_tmux" =~ [^a-zA-Z0-9_-] ]]; then
  _dssh_perror "--tmux=<SESSION> must have a session name that is composed of only dash, underscore, and alphanumeric characters"
fi

if [[ "${#tunnel}" -gt 0 && "${#command_string}" -gt 0 ]]; then
  _dssh_perror "--tunnel and --command cannot be specified at the same time"
fi

_dssh_init

local addr=""
local desc=""
local name=""
if [[ ${#tags[@]} -eq 1 && "${tags[1]}" =~ $_dssh_public_fqdn_target ]]; then
  addr="${tags[1]}"
else
  local info=""
  info="$(_dssh_resolve_target "${tags[@]}")"
  if [[ "$?" -eq 1 ]]; then
    WAS_UPDATED=true
  fi
  if [ -z "$info" ]; then
    _dssh_update_inventories
    info="$(_dssh_resolve_target "${tags[@]}")"
    if [[ "$?" -eq 1 ]]; then
      WAS_UPDATED=true
    fi
    if [ -z "$info" ]; then
      _dssh_pwarn "Host '${tags[*]}' not found in inventory.  Attempting to connect anyway..."
      addr="${tags[*]}"
    fi
  fi
  if [[ "$addr" == "" ]]; then
    local count=$(echo "$info" | wc -l)
    if [[ $count -gt 1 ]]; then
      if _dssh_is_inventory_old; then
        _dssh_update_inventories
      fi
      _dssh_prompt_server
      local result="$?"
      if [[ "$result" -eq -1 ]]; then
        return $_dssh_e_noerror
      elif [[ "$result" -gt 0 ]]; then
        return $result
      fi
    fi
    addr=$(echo $info | awk -F, '{print $2}')
    name=$(echo $info | awk -F, '{print $1}')
    desc=" ($name) [$(echo $info | awk -F, '{print $4}')]"
    if [[ "$addr" =~ $PUBLIC_DNS_NAME_PATTERN ]] && ! nc -G3 -z $addr 22 &>/dev/null; then
      if [[ "$WAS_UPDATED" == "false" ]]; then
        _dssh_update_inventories
        info="$(_dssh_resolve_target "$name")"
        if [[ "$?" -eq 1 ]]; then
          WAS_UPDATED=true
        fi
        if [[ "$info" == "" ]]; then
          info="$(_dssh_resolve_target "${tags[@]}")"
        fi
        _dssh_prompt_server
        local result="$?"
        if [[ "$result" -eq -1 ]]; then
          return $_dssh_e_noerror
        elif [[ "$result" -gt 0 ]]; then
          return $result
        fi
        addr=$(echo $info | awk -F, '{print $2}')
        desc=$(echo $info | awk -F, '{print "(" $1 ") [" $3 "]"}')
      fi
    fi
  fi
fi

if [[ "${addr}" == "" ]]; then
  _dssh_pverbose "No server was found"
  return $_dssh_e_noserver
fi

echo "" 1>&2
local connection_message="Connecting to"
local -a ssh_command=( "ssh" )
if [[ "$enable_tmux" != "" ]]; then
  if [[ "${#command_string}" -eq 0 && "${#tunnel}" -eq 0 ]]; then
    _dssh_pverbose "Enabling tmux session"
    command_string="tmux -CC new -A -s '${enable_tmux}'"
    ssh_options+=( "-tt" )
  elif [[ "${#command_string}" -gt 0 ]]; then
    _dssh_pverbose "Command specified, tmux session disabled"
  else
    _dssh_pverbose "Tunneling enabled, tmux session disabled"
  fi
fi
if [[ "${#command_string}" -gt 0 ]]; then
  connection_message="Running command \`$command_string\` on"
fi
if [[ "${#tunnel}" -gt 0 ]]; then
  connection_message="Opening tunnel for port \`$tunnel\` to"
fi
if [[ "${#ssh_options[@]}" -gt 0 ]]; then
  read -rA opts <<<"${ssh_options[@]}"
  for opt in "${opts[@]}"; do
    ssh_command+=( "$opt" )
  done
fi
if [[ "${#tunnel}" -gt 0 ]]; then
  ssh_command+=( "-nNT" "-L" "${tunnel}:localhost:${tunnel}" )
fi
ssh_command+=( "${addr}" )
if [[ "${#command_string}" -gt 0 ]]; then
  ssh_command+=( "${command_string}" )
fi
_dssh_pverbose "$connection_message ${addr}${desc}..."
${ssh_command[@]}
return $?

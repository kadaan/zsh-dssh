if [[ $0 != pdssh || -n $ZSH_SCRIPT ]]; then
    # Handle $0 according to the Zsh Plugin Standard:
    # http://zdharma.org/Zsh-100-Commits-Club/Zsh-Plugin-Standard.html
    0=${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}
    0=${${(M)0##/*}:-$PWD/$0}
fi

set +m
set -o pipefail

local WAS_UPDATED=false
local -a sort_command=("cat" "-u")

_usage() {
  echo
  echo "Locates and runs commands on multiple AWS servers via SSH."
  echo
  echo "Usage: pdssh [ssh options] [options] tag"
  echo "    -r, --refresh         refresh the cached host information"
  echo "    --command=COMMAND     run the specified command and exit"
  echo "    --sort                sort the results by server"
  echo "    -v                    verbose logging, multiple -v options increase the verbosity"
  echo "    -h, --help            display this help message"
}
_parse_parameter() {
  local shift_count=1
  case "$1" in
    -S | -q | -b | -N | -d)
      _dssh_add_ssh_option "$1"
    ;;
    -l | -t | -u | -f)
      _dssh_add_ssh_option "$1 $2"
      shift_count=2
    ;;
    -l\ * | -t\ * | -u\ * | -f\ *)
      _dssh_add_ssh_option "$1"
    ;;
    --sort)
      sort_command=("sort" "-s" "-t" ":" "-k" "1")
    ;;
    *)
      _dssh_parse_common_parameters "$1"
      shift_count=$?
    ;;
  esac
  return $shift_count
}

_dssh_prepare_dssh_locking

if [[ $# -eq 0 ]]; then
  _dssh_perror "wrong number of input parameters [$#]"
  _usage
  return $_dssh_e_noargs
fi

local dependencies_installed=false
local refresh_enabled=false
local verbose_level=0
local ssh_options=()
local tags=()
local command_string=""
for var in "$@"; do
  case "$var" in
    -h | --help)
      _usage
      return $_dssh_e_noerror
    ;;
    -v | -vv | -vvv | -vvvv)
      local verbose_elements=${var##-}
      verbose_level=${#verbose_elements}
      if [[ $verbose_level -ge 4 ]]; then
        if [[ "$ZSH_VERSION" != "" ]]; then
          local start_time="${${EPOCHREALTIME//.}:0:-6}"
          PS4="+ [\$(( \${\${EPOCHREALTIME//.}:0:-6} - $start_time ))] [%N:%i] "
        elif [[ "${BASH_VERSINFO[0]}" == "5" ]]; then
          local start_time="$(( ${EPOCHREALTIME//.} / 1000 ))"
          PS4="+ [\$(( (\${EPOCHREALTIME//.} / 1000) - $start_time ))] [\${FUNCNAME[0]}:\${LINENO}] "
        elif command -v gdate > /dev/null; then
          local start_time="$(gdate "+%s%3N")"
          PS4="+ [\$(( \$(gdate "+%s%3N") - $start_time ))] [\${FUNCNAME[0]}:\${LINENO}] "
        else
          local start_time="$(date "+%s")"
          PS4="+ [\$(( \$(date "+%s") - $start_time ))] [\${FUNCNAME[0]}:\${LINENO}] "
        fi
        set -x
      fi
    ;;
  esac
done

for var in "${DEFAULT_PARAMETERS[@]}"; do
  _parse_parameter "$var"
done

local pdssh_config_file="${DSSH_CONFIG_FILE:-$HOME/.pdsshrc}"
if [[ -f "$pdssh_config_file" ]]; then
  while IFS="" read -r var || [ -n "$var" ]; do
    _parse_parameter "$var"
  done < $pdssh_config_file
fi

while [[ $# -gt 0 ]]; do
  local shift_count=1
  _parse_parameter $@
  shift_count="$?"
  shift $shift_count
done

if [[ "$refresh_enabled" = true ]]; then
  _dssh_update_inventories
fi

if [[ ${#tags[@]} -eq 0 ]]; then
  return $_dssh_e_noerror
fi

local addr=""
local desc=""
if [[ ${#tags[@]} -eq 1 && "${tags[1]}" =~ $_dssh_public_fqdn_target ]]; then
  addr="${tags[1]}"
else
  local info=""
  info="$(_dssh_resolve_target "${tags[@]}")"
  if [[ "$?" -eq 1 ]]; then
    WAS_UPDATED=true
  fi
  if [ -z "$info" ]; then
    _dssh_update_inventories
    info="$(_dssh_resolve_target "${tags[@]}")"
    if [[ "$?" -eq 1 ]]; then
      WAS_UPDATED=true
    fi
    if [ -z "$info" ]; then
      _dssh_pwarn "Host '${tags[*]}' not found in inventory.  Attempting to connect anyway..."
      addr="${tags[*]}"
    fi
  fi
  if [[ "$addr" == "" ]]; then
    addr=$(echo "$info" | awk -F, '{printf("%s,",$2)}' | sed 's/,\s*$//')
  fi
fi

echo "" 1>&2
local server_count="$(echo "$addr" | awk -F, '{ print NF; exit }')"
local server_message="$server_count server"
if [[ "$server_count" -ne 1 ]]; then
  server_message="${server_message}s"
fi
local connection_message="Running command against $server_message..."
local -a ssh_command=( "pdsh" "-R" "ssh")
if [[ "${#ssh_options[@]}" -gt 0 ]]; then
  ssh_command+=( "${ssh_options[@]}" )
fi
ssh_command+=( "-w" "$addr" )
if [[ "$command_string" != "" ]]; then
  ssh_command+=( "${command_string}" )
fi
_dssh_pverbose "$connection_message"
local awk_map=""
for f in $HOME/.aws-hosts.*; do
  awk_map="${awk_map}while((getline line < \"$f\") > 0) {split(line,f,\",\");map[f[2]] = f[1]\" (\"f[9]\"):\"}"
done
env PDSH_SSH_ARGS_APPEND="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR" ${ssh_command[@]} | unbuffer -p awk -F ":" "BEGIN{$awk_map}{ \$1 = map[\$1]; print }" | ${sort_command[@]}
return $?
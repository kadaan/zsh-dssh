if [[ $0 != pdssh || -n $ZSH_SCRIPT ]]; then
    0=${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}
    0=${${(M)0##/*}:-$PWD/$0}
    typeset ZSH_DSSH_DIR=${0:h}
fi

set +m
set -o pipefail

local WAS_UPDATED=false
local name_enabled=true
local -a sort_command=()
local list_hosts=false
_usage() {
  echo
  echo "Locates and runs commands on multiple AWS servers via SSH."
  echo
  echo "Usage: pdssh [pdsh options] [options] tags [tags ...]"
  echo ""
  _dssh_tag_usage
  echo "PDSH OPTIONS:"
  echo "    Flags:   -b | -N | -d"
  echo "    Options: -l | -t | -u | -f"
  echo ""
  echo "OPTIONS:"
  echo "    --command=COMMAND     run the specified command and exit"
  echo "    --list-hosts          lists the targeted hosts and exit"
  echo "    --sort                sort the results by server"
  _dssh_common_usage
}
_parse_parameter() {
  local shift_count=1
  case "$1" in
    -N)
      _dssh_add_ssh_option "$1"
      name_enabled=false
    ;;
    -b | -d)
      _dssh_add_ssh_option "$1"
    ;;
    -l | -t | -u | -f)
      _dssh_add_ssh_option "$1 $2"
      shift_count=2
    ;;
    -l\ * | -t\ * | -u\ * | -f\ *)
      _dssh_add_ssh_option "$1"
    ;;
    --sort)
      sort_command=("sort" "-s" "-t" ":")
    ;;
    --list-hosts)
      list_hosts=true
    ;;
    -c=* | --command=*)
      command_string="${1#*=}"
    ;;
    -v | -vv | -vvv | -vvvv)
    ;;
    *)
      if [[ "$1" =~ ^-[bNd]+$ ]]; then
        for char in $(echo "${1:1}" | fold -w1); do
          _parse_parameter "-$char"
        done
      else
        _dssh_parse_common_parameters "$1"
        shift_count=$?
      fi
    ;;
  esac
  return $shift_count
}
_install_dependencies() {
  which -a pdsh &>/dev/null || {
    brew install pdsh &>/dev/null || _dssh_pfatal "failed to install pdsh: $?"
  }
}

_dssh_prepare_dssh_locking

if [[ $# -eq 0 ]]; then
  _dssh_perror "wrong number of input parameters [$#]"
  _usage
  return $_dssh_e_noargs
fi

local python_installed=false
local refresh_enabled=false
local verbose_level=0
local ssh_options=()
local tags=()
local command_string=""
if ! _dssh_parse_parameters ".pdsshrc" "$@"; then
  return $_dssh_e_noerror
fi
if [[ "${#sort_command}" -gt 0 && "$name_enabled" == "true" ]]; then
  sort_command+=("-k" "1,1")
fi

local addr=""
local desc=""
if [[ ${#tags[@]} -eq 1 && "${tags[1]}" =~ $_dssh_public_fqdn_target ]]; then
  addr="${tags[1]}"
else
  local info=""
  info="$(_dssh_resolve_target "${tags[@]}")"
  if [[ "$?" -eq 1 ]]; then
    WAS_UPDATED=true
  fi
  if [ -z "$info" ]; then
    _dssh_update_inventories
    info="$(_dssh_resolve_target "${tags[@]}")"
    if [[ "$?" -eq 1 ]]; then
      WAS_UPDATED=true
    fi
    if [ -z "$info" ]; then
      _dssh_pwarn "Host '${tags[*]}' not found in inventory.  Attempting to connect anyway..."
      addr="${tags[*]}"
    fi
  fi
  if [[ "$addr" == "" ]]; then
    addr=$(echo "$info" | awk -F, '{printf("%s,",$2)}' | sed 's/,\s*$//')
  fi
fi

if [[ "$list_hosts" == "true" ]]; then
  _dssh_print_menu_hosts $info
  return $_dssh_e_noerror
fi

echo "" 1>&2
local server_count="$(echo "$addr" | awk -F, '{ print NF; exit }')"
local server_message="$server_count server"
if [[ "$server_count" -ne 1 ]]; then
  server_message="${server_message}s"
fi
local connection_message="Running command against $server_message..."
local -a ssh_command=( "pdsh" "-S" "-R" "ssh")
if [[ "${#ssh_options[@]}" -gt 0 ]]; then
  ssh_command+=( "${ssh_options[@]}" )
fi
ssh_command+=( "-w" "$addr" )
if [[ "$command_string" != "" ]]; then
  ssh_command+=( "${command_string}" )
fi
_install_dependencies
_dssh_pverbose "$connection_message"
local awk_map="my \$hosts_file;"
for f in $HOME/.aws-hosts.*; do
awk_map=$(\cat <<EOF
$awk_map
open(\$hosts_file, '$f') || die 'Cannot open file "$f".';
while (<\$hosts_file>) {
  chomp;
  my @f = split(/,/, \$_, -1);
  \$host_map{\$f[(2)-1]} = "${_dssh_color_prefix}" . \$f[(11)-1] . '${_dssh_color_suffix}' . \$f[(1)-1] . "${_dssh_nc} ${_dssh_gray}(" . \$f[(9)-1] . ")${_dssh_nc}";
  \$host_map{(split /\\./, \$f[(2)-1])[0]} = "${_dssh_color_prefix}" . \$f[(11)-1] . '${_dssh_color_suffix}' . \$f[(1)-1] . "${_dssh_nc} ${_dssh_gray}(" . \$f[(9)-1] . ")${_dssh_nc}";
}
EOF
)
done
local enrich_script=$(\cat <<EOF
#!/usr/bin/perl
use strict;
use warnings;

local \$, = ' ';
local \$\ = "\n";
my %host_map;
my \$fqdn_regex = qr/(\\d+\\.\\d+\\.\\d+\\.\\d+)|(ec2-\\d+-\\d+-\\d+-\\d+(?:\\..+?\\.amazonaws\\.com)?)/p;
$awk_map
while (<>) {
  chomp;
  my \$line = \$_;
  my %matched_hosts;
  my \$has_match = \$line =~ /\$fqdn_regex/g ? scalar(my \$RLENGTH = length(\$&), my \$RSTART = length(\$\`)+1) : 0;
  while (\$has_match > 0) {
	  my \$host = substr(\$line, (\$RSTART)-1, \$RLENGTH);
    my \$host_regex = \$host;
    \$host_regex =~ s/[\\.]/\\\\\$&/g;
    if (defined \$host_map{\$host}) {
      \$matched_hosts{\$host_regex} = \$host_map{\$host};
    }
    \$line =~ s/\$host_regex//g;
    \$has_match = \$line =~ /\$fqdn_regex/g ? scalar(\$RLENGTH = length(\$&), \$RSTART = length(\$\`)+1) : 0;
  }

  while ( (my \$host_pattern, my \$host_value) = each %matched_hosts ) {
    my \$replacement = '"'.(\$host_value).'"';
    \$_ =~ s/&/\$&/g, s/\$host_pattern/eval \$replacement/ge;
  }
  print \$_;
}
EOF
)
if [[ "${#sort_command}" -gt 0 ]]; then
  env PDSH_SSH_ARGS_APPEND="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR" ${ssh_command[@]} 2>&1 | perl -e "$enrich_script" | ${sort_command[@]}
else
  env PDSH_SSH_ARGS_APPEND="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR" ${ssh_command[@]} 2>&1 | perl -e "$enrich_script"
fi
return $?